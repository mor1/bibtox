#!/usr/bin/env python3

import json
import logging
import os

import bibtexparser
import click
from bibtexparser import middlewares as mw
from rich.console import Console
from rich.logging import RichHandler
from yattag import Doc, indent

errcon = Console(stderr=True)
logging.basicConfig(
    level="INFO",
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(console=errcon, rich_tracebacks=True)],
)
log = logging.getLogger(__name__)

HOMEPAGES = {}
DOISVC = "https://doi.org"

ABBREVIATIONS = {
    "jan": "January",
    "feb": "February",
    "mar": "March",
    "apr": "April",
    "may": "May",
    "jun": "June",
    "jul": "July",
    "aug": "August",
    "sep": "September",
    "oct": "October",
    "nov": "November",
    "dec": "December",
}

MONTHS = {
    "01": "January",
    "02": "February",
    "03": "March",
    "04": "April",
    "05": "May",
    "06": "June",
    "07": "July",
    "08": "August",
    "09": "September",
    "10": "October",
    "11": "November",
    "12": "December",
}
MONTHS.update([(MONTHS[k], k) for k in MONTHS])


def parse_date(bib):
    date = bib.get("issue_date")
    if date:
        date = date.value
        month, year = date.split(" ")
        day = ""

    else:
        date = bib.get("date")
        if date:
            date = date.value
            year, month, *day = date.split("-") if "-" in date else date.split()
        else:
            year = bib.get("year").value
            month = bib.get("month").value if bib.get("month") else ""
            month, *day = month.split("#")

    day = " ".join(day if day else "").strip().strip('"')

    month = month.strip()
    month = ABBREVIATIONS[month] if month in ABBREVIATIONS else month
    month = MONTHS[month] if len(month) > 2 else month

    isodate = f"{year}-{month}-{day}" if month else year
    formatted = (
        f"{day} {MONTHS[month]}, {year}"
        if day
        else f"{MONTHS[month]} {year}"
        if month
        else f"{year}"
    )
    return isodate.strip("-"), formatted, year


def authors(doc, bib):
    authors = bib.get("author").value
    with doc.tag("span", klass="authors"):
        for i, author in enumerate(authors):
            if i == 0:
                pass
            elif i + 1 == len(authors):
                doc.text(" and ")
            else:
                doc.text(", ")

            klass = "author"
            key = f"{author.first[0]} {author.last[0]}"
            homepage = HOMEPAGES.get(key)

            if (author.first[0], author.last[0]) == ("Richard", "Mortier"):
                klass += " highlight"

            author.first = [f"{author.first[0][0].strip()}."]
            with doc.tag("span", klass=klass):
                if homepage:
                    with doc.tag("a", href=homepage):
                        doc.text(f"{author.merge_last_name_first}")
                else:
                    doc.text(f"{author.merge_last_name_first}")


def year(doc, year):
    with doc.tag("span", klass="year"):
        doc.text(f" ({year}). ")


def title(doc, bib):
    title = bib.get("title").value
    with doc.tag("span", klass="title"):
        doc.asis(f"&ldquo;{title}&rdquo;")
    doc.text(". ")


def venue(doc, bib):
    addendum = ""
    match bib.entry_type:
        case "inproceedings":
            doc.text("In ")
            venue = bib["booktitle"]

            pages = bib.get("pages")
            if pages:
                addendum += f" pp.&nbsp;{pages.value}"

            address = bib.get("address")
            if address:
                addendum += f". {address.value}"

        case "article":
            doc.text("In ")
            venue = bib.get("journaltitle")
            if not venue:
                venue = bib.get("journal")
            venue = venue.value

            volume = bib.get("volume")
            if volume:
                addendum += f"&nbsp;{volume.value}"

            number = bib.get("number")
            if number:
                addendum += f"({number.value})"

            pages = bib.get("pages")
            if pages:
                addendum += f":{pages.value}"

        case "patent":
            venue = "Patent"

        case "online" | "report" | "misc":
            doc.text("In ")
            venue = bib.get("eprinttype")
            if not venue:
                venue = bib.get("institution")
            if not venue:
                venue = bib.get("publisher")
            venue = venue.value

        case "inbook":
            doc.text("In ")
            venue = bib.get("volume")

            if not venue:
                venue = bib.get("booktitle")
            venue = venue.value

        case "unpublished":
            venue = ""

        case "book":
            venue = ""

        case "techreport":
            venue = bib["type"]

        case _:
            venue = "UNKNOWN VENUE"

    with doc.tag("span", klass="venue"):
        doc.asis(f"{venue.strip()}")

    if len(addendum) > 0:
        doc.asis(f"{addendum}")


def publisher(doc, bib):
    publisher = bib.get("publisher")
    if publisher:
        with doc.tag("span", klass="publisher"):
            doc.text(f" ({publisher.value.strip()})")


def date(doc, date):
    with doc.tag("span", klass="date"):
        doc.text(f"{date}")
    doc.text(". ")


def note(doc, bib):
    note = bib.get("note")
    if note:
        with doc.tag("span", klass="note"):
            doc.text(f"{note.value.strip()}".replace("..", "."))
        doc.text(". ")


def doi(doc, bib):
    doi = bib.get("doi")
    if doi:
        with doc.tag("span", klass="doi"):
            with doc.tag("a", href=f"{DOISVC}/{doi.value}"):
                doc.asis(f"doi:{doi.value}")
        doc.text(". ")


def url(doc, bib):
    url = bib.get("url")
    log.debug(f"{url=} {bib=}")
    if url:
        with doc.tag("span", klass="url"):
            with doc.tag("a", href=url.value):
                doc.asis(f"{url.value}")
        doc.text(". ")


def entry(doc, bib):
    klass = ["paper"]
    match bib.entry_type:
        case "article":
            klass += ["journal"]
        case "inproceedings":
            klass += ["conference"]
        case _:
            klass += [bib.entry_type]

    with doc.tag("li", id=bib.key, klass=" ".join(klass)):
        _isodate, fmtdate, yr = parse_date(bib)

        authors(doc, bib)
        year(doc, yr)

        title(doc, bib)

        venue(doc, bib)
        publisher(doc, bib)
        if bib.entry_type != "unpublished":
            doc.text(". ")

        date(doc, fmtdate)
        note(doc, bib)
        doi(doc, bib)
        url(doc, bib)


@click.command(context_settings={"show_default": True})
@click.argument("input", type=click.File("r"))
@click.option("--debug", default=False, is_flag=True)
@click.option("--sort/--no-sort", default=True, help="Sort entries.")
@click.option("--html/--no-html", default=False, help="Output HTML.")
@click.option("--bibtex/--no-bibtex", default=False, help="Output BibTex.")
def bib2html(input, debug, sort, html, bibtex):
    """Process BibTeX/BibLaTeX input file.

    Sort entries if requested. Output to HTML and/or BibTeX/BibLaTeX.
    """

    if debug:
        log.setLevel(logging.DEBUG)

    config = json.load(input) if input.name.endswith(".json") else None
    log.debug(f"{config=}")

    global HOMEPAGES

    homepages = config.get("homepages") if config else None
    if homepages:
        with open(homepages) as f:
            HOMEPAGES = json.load(f)
    log.debug(f"{HOMEPAGES=}")

    strings = config.get("strings", "") if config else ""
    if strings and len(strings) > 0:
        with open(strings) as f:
            strings = f.read()
    log.debug(f"{strings=}")

    bibdir = config.get("bibdir", ".") if config else "."
    log.debug(f"{bibdir=}")

    if not config:
        _p, f = os.path.split(input.name)
        b, e = os.path.splitext(f)
        config = {"sections": {b: [input.name]}}

    sections = []
    for section, filenames in config["sections"].items():
        log.info(f"{section=} {filenames=}")
        content = ""
        for filename in filenames:
            with open(os.path.join(bibdir, filename)) as f:
                content += f.read()

        library = bibtexparser.parse_string(
            strings + content,
            append_middleware=[
                mw.LatexDecodingMiddleware(),
                mw.SeparateCoAuthors(),
                mw.SplitNameParts(),
            ],
        )

        stats = {
            "blocks": len(library.blocks),
            "entries": len(library.entries),
            "comments": len(library.comments),
            "strings": len(library.strings),
            "preamble": len(library.preambles),
            "failures": len(library.failed_blocks),
        }
        log.info(f"{stats=}")

        if len(library.failed_blocks) > 0:
            for failure in library.failed_blocks:
                log.error(
                    f"{failure.start_line}({failure.duplicate_keys}) {failure.raw}"
                )

        entries = (
            sorted(library.entries, key=lambda e: parse_date(e)[0], reverse=True)
            if sort
            else library.entries
        )
        sections.append((section, entries))

    if html:
        doc = Doc()
        doc.text("{{dummy}}\n")
        for section, entries in sections:
            with doc.tag("section", klass="papers"):
                doc.text(section)
            with doc.tag("ol", klass="papers"):
                for e in entries:
                    entry(doc, e)
        print(indent(doc.getvalue()))

    if bibtex:
        bf = bibtexparser.BibtexFormat()
        bf.value_column = "auto"
        bf.indent = "  "

        for section, entries in sections:
            lib = bibtexparser.Library(blocks=entries)
            mws = [
                mw.MergeNameParts(allow_inplace_modification=True),
                mw.MergeCoAuthors(allow_inplace_modification=True),
            ]
            bs = bibtexparser.write_string(
                lib, prepend_middleware=mws, bibtex_format=bf
            )
            with open(f"{section}.bib", "w") as o:
                o.write(bs)


if __name__ == "__main__":
    bib2html()  # pyright: ignore
